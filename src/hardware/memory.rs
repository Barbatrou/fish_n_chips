//!
//! Memory emulator
//!

use std::ops::{Deref, DerefMut};

const RAM_SIZE: usize = 4096;

const SPRITES: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
];

pub struct Memory
{
    pub memory: [u8; RAM_SIZE],
}

impl Deref for Memory
{
    type Target = [u8; RAM_SIZE];

    fn deref(&self) -> &Self::Target {
        &self.memory
    }
}

impl DerefMut for Memory
{
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.memory
    }
}

impl Memory
{
    pub fn new() -> Memory
    {
        let mut memory = Memory {
            memory: [0; RAM_SIZE],
        };
        for (i, &byte) in SPRITES.iter().enumerate() {
            memory[i] = byte;
        }
        memory
    }

    // TODO implement loading into memory
}

